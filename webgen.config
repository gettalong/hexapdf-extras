# -*- ruby -*-

require 'webgen/path_handler/base'

website.config['website.lang'] = 'en'
website.config['website.base_url'] = 'https://hexapdf-extras.gettalong.org/'
website.config['sources'] = [['/', :file_system, 'website']]
website.config['destination'] = [:file_system, 'webgen-out']
website.config['website.tmpdir'] = 'webgen-tmp'

class PDFImage

  include Webgen::PathHandler::Base

  def create_nodes(path)
    nodes = []
    nodes << create_node(path)
    pdf_path = path.dup
    pdf_path.ext = 'pdf'
    nodes << create_node(pdf_path)
    nodes
  end

  def content(node)
    create_files(node)
    if node.alcn =~ /png$/
      File.binread("#{node['file_base']}.png")
    else
      File.binread("#{node['file_base']}.pdf")
    end
  end

  private

  def create_files(node)
    source_file = "#{node['file_base']}.rb"
    png_file = "#{node['file_base']}.png"
    pdf_file = "#{node['file_base']}.pdf"

    return if File.exist?(png_file) && File.mtime(png_file) > File.mtime(source_file)

    ARGV[0] = pdf_file
    load(source_file, true)
    doc = HexaPDF::Document.open(pdf_file)
    doc.files.add(source_file, name: File.basename(source_file), description: 'Source code')
    doc.write(pdf_file, optimize: true)
    system("pdftocairo -singlefile -png -r 144 -f 1 -l 1 #{pdf_file} #{png_file[0..-5]}")
  end

end

website.ext.path_handler.register(PDFImage, insert_at: 4, name: 'pdf_image')

module ::RDocPDFImages

  TEMPLATES = {
    'canvas100' => <<~SOURCE_CODE,
      require 'hexapdf'
      require 'hexapdf-extras'
      require 'geom2d'
      doc = HexaPDF::Document.new
      canvas = doc.pages.add([0, 0, 100, 100]).canvas

      %s

      doc.write(ARGV[0] || 'out.pdf')
    SOURCE_CODE
    'composer100' => <<~SOURCE_CODE,
      require 'hexapdf'
      require 'hexapdf-extras'
      require 'geom2d'

      def draw_current_frame_shape(color = "black")
        $c.canvas.line_width(1).line_dash_pattern(0).
          stroke_color(color).draw(:geom2d, object: $c.frame.shape)
      end

      composer = $c = HexaPDF::Composer.new(page_size: [0, 0, 200, 100], margin: 10)
      composer.canvas.save_graphics_state.
        line_width(1).line_dash_pattern(1).
        stroke_color("lightgray").
        rectangle(10, 10, 180, 80).stroke.
        restore_graphics_state

      %s

      composer.write(ARGV[0] || 'out.pdf')
    SOURCE_CODE
    'composerA5l' => <<~SOURCE_CODE,
      require 'hexapdf'
      require 'hexapdf-extras'
      require 'geom2d'

      composer = $c = HexaPDF::Composer.new(page_size: :A5, page_orientation: :landscape, margin: 0)

      %s

      composer.write(ARGV[0] || 'out.pdf')
    SOURCE_CODE
  }


  def create_page_node_for_class(api_path, dir_node, klass, output_flag_file)
    node = super

    dir = @website.tmpdir("rdoc_pdf_images")
    FileUtils.mkdir_p(dir)

    block = lambda do |code_object|
      if code_object.kind_of?(RDoc::ClassModule)
        code_object.instance_variable_set(:@comment, RDoc::Comment.new(code_object.comment).parse)
      elsif code_object.comment.kind_of?(RDoc::Comment)
        code_object.comment = code_object.comment.parse
      end
      file_name = code_object.full_name.gsub(/:|#/, '_')
      counter = 0

      process_markup = lambda do |markup|
        list = []

        markup.parts.each_with_index do |part, index|
          if part.kind_of?(RDoc::Markup::List)
            part.items.each {|list_item| process_markup.call(list_item) }
          elsif part.kind_of?(RDoc::Markup::Document)
            process_markup.call(part)
          end
          next unless part.kind_of?(RDoc::Markup::Verbatim)

          if part.text.match?(/#>pdf/)
            template_name, modifier = part.text.scan(/(?<=#>pdf-).*/).first.to_s.split('-')
            template = TEMPLATES[template_name] || TEMPLATES["canvas"]
            part.parts[0].sub!(/\A.*?\n/, '')
            code = "$:.unshift '#{__dir__}/lib'\n" + format(template, part.text)
            file_base = File.join(dir, "#{file_name}#{counter}")
            source_file = "#{file_base}.rb"
            if !File.exist?(source_file) || File.read(source_file) != code
              File.write(source_file, code)
            end
            path = Webgen::Path.new(node.parent.alcn + "#{file_name}#{counter}.png",
                                    'modified_at' => File.mtime(source_file),
                                    'handler' => 'pdf_image', 'file_base' => file_base)
            @website.ext.path_handler.create_secondary_nodes(path, code).first
            list << [counter, index, modifier]
            counter += 1
          end
        end
        list.reverse_each do |counter, index, modifier|
          part = RDoc::Markup::Raw.new("<p class='pdf-#{modifier}'><a href='#{file_name}#{counter}.pdf'>" \
                                       "<img class='pdf-image' src='#{file_name}#{counter}.png' /></a></p>")
          if modifier == 'hide'
            markup.parts[index] = part
          else
            markup.parts.insert(index + 1, part)
          end
        end
      end

      process_markup.call(code_object.comment)
    end
    block.call(klass)
    klass.method_list.each(&block)
    klass.attributes.each(&block)
    klass.constants.each(&block)

    node
  end
end

class Webgen::PathHandler::Api
  prepend ::RDocPDFImages
end

