AllCops:
  Include:
    - lib/**/*.rb
    - test/**/*.rb
  TargetRubyVersion: 2.5


Layout/LineLength:
  Max: 110 # Preferred length is 100

Metrics/ParameterLists:
  CountKeywordArgs: false
  Max: 8
  MaxOptionalParameters: 8

Metrics/BlockLength:
  Enabled: false

Metrics/MethodLength:
  Enabled: false

Metrics/ClassLength:
  Enabled: false

Metrics/ModuleLength:
  Enabled: false

Metrics/AbcSize:
  Enabled: false

Metrics/CyclomaticComplexity:
  Enabled: false

Metrics/PerceivedComplexity:
  Enabled: false

Metrics/BlockNesting:
  Max: 5


Style/Encoding:
  Enabled: false

Style/FrozenStringLiteralComment:
  Exclude:
    - test/**/*.rb

Style/StringLiterals:
  Enabled: false # we don't care

Style/RegexpLiteral:
  AllowInnerSlashes: true

Style/NumericLiterals:
  MinDigits: 6

Style/NumericLiteralPrefix:
  EnforcedOctalStyle: zero_only

Style/SymbolArray:
  EnforcedStyle: brackets

Style/WordArray:
  MinSize: 5

Style/TrailingCommaInArrayLiteral:
  EnforcedStyleForMultiline: comma

Style/TrailingCommaInHashLiteral:
  EnforcedStyleForMultiline: comma

Style/ClassCheck:
  EnforcedStyle: kind_of?

Style/EmptyMethod:
  EnforcedStyle: expanded

Style/Lambda:
  EnforcedStyle: lambda

Style/NumericPredicate:
  EnforcedStyle: comparison

Style/TernaryParentheses:
  EnforcedStyle: require_parentheses

Style/FormatString:
  EnforcedStyle: sprintf

Style/Semicolon:
  AllowAsExpressionSeparator: true

Style/YodaCondition:
  EnforcedStyle: forbid_for_equality_operators_only

Style/EmptyElse:
  EnforcedStyle: empty

Style/SingleLineMethods:
  Exclude:
    - test/**/*

Style/Documentation:
  Exclude:
    - test/**/*

Style/GuardClause:
  Enabled: false # false alarms

Style/Next:
  Enabled: false # not really useful

Style/ParallelAssignment:
  Enabled: false # not really needed

Style/TrivialAccessors:
  Enabled: false

Style/NestedTernaryOperator:
  Enabled: false # compact nested ternary operators are okay

Style/RescueModifier:
  Enabled: false # valid but using it makes life sometimes easier

Style/MutableConstant:
  Enabled: false # valid but sometimes unavoidable

Style/CommentedKeyword:
  Enabled: false # false alarms and we do want yield comments on that line

Style/StderrPuts:
  Enabled: false # false alarms because not all $stderr.puts messages are Ruby style warnings

Style/PerlBackrefs:
  Enabled: false # sometimes there are no good alternatives

Style/IfUnlessModifier:
  Enabled: false # useful but sometimes the meaning is better conveyed using an if/unless statement

Style/InfiniteLoop:
  Enabled: false # why should Kernel#loop be better than while true?

Style/SpecialGlobalVars:
  Enabled: false # I think that $! and $? are recognizable in terms of their function

Style/MultipleComparison:
  Enabled: false # why should an array be created? especially if only two items are compared

Style/AccessModifierDeclarations:
  Enabled: false

Style/WhileUntilModifier:
  Enabled: false # I prefer to use either one or the other, depending on context

Style/FormatStringToken:
  Enabled: false # I don't care about this

Style/ExponentialNotation:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashEachMethods:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Style/OptionalBooleanParameter:
  Enabled: false

Layout/HashAlignment:
  EnforcedLastArgumentHashStyle: ignore_implicit

Layout/SpaceInsideBlockBraces:
  SpaceBeforeBlockParameters: false

Layout/SpaceInsideHashLiteralBraces:
  EnforcedStyle: no_space

Layout/EmptyLineBetweenDefs:
  AllowAdjacentOneLineDefs: true

Layout/EmptyLinesAroundModuleBody:
  Enabled: false

Layout/EmptyLinesAroundClassBody:
  EnforcedStyle: empty_lines

Layout/EmptyLineAfterGuardClause:
  Enabled: false

Layout/MultilineOperationIndentation:
  EnforcedStyle: indented

Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

Layout/DotPosition:
  EnforcedStyle: trailing

Layout/EmptyLineAfterMagicComment:
  Enabled: false # we have the magic comment and then the license

Layout/AssignmentIndentation:
  Enabled: false # false alarms

Layout/SpaceAroundMethodCallOperator:
  Enabled: true

Layout/LeadingCommentSpace:
  Enabled: false # would be nice but triggers for RDoc things like :nodoc:

Naming/FileName:
  Exclude:
    - lib/hexapdf-extras.rb

Naming/HeredocDelimiterNaming:
  Enabled: false # we like our delimiters short and obvious

Naming/MethodParameterName:
  Enabled: false # for points the names x,y are perfectly reasonable

Lint/LiteralAsCondition:
  Enabled: false # we use while true

Lint/StructNewOverride:
  Enabled: true

Lint/RaiseException:
  Enabled: true

Lint/MissingSuper:
  Enabled: false # why the need to fallback to super?

Gemspec/DateAssignment: # new in 1.10
  Enabled: true
Gemspec/RequireMFA: # new in 1.23
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # new in 1.18
  Enabled: false
Layout/SpaceBeforeBrackets: # new in 1.7
  Enabled: true
Lint/AmbiguousAssignment: # new in 1.7
  Enabled: true
Lint/AmbiguousOperatorPrecedence:
  Enabled: false
Lint/AmbiguousRange: # new in 1.19
  Enabled: true
Lint/DeprecatedConstants: # new in 1.8
  Enabled: true
Lint/DuplicateBranch: # new in 1.3
  Enabled: false
Lint/DuplicateRegexpCharacterClassElement: # new in 1.1
  Enabled: true
Lint/EmptyBlock: # new in 1.1
  Enabled: false
Lint/EmptyClass: # new in 1.3
  Enabled: true
Lint/EmptyInPattern: # new in 1.16
  Enabled: true
Lint/IncompatibleIoSelectWithFiberScheduler: # new in 1.21
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # new in 1.8
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # new in 1.2
  Enabled: true
Lint/NumberedParameterAssignment: # new in 1.9
  Enabled: true
Lint/OrAssignmentToConstant: # new in 1.9
  Enabled: true
Lint/RedundantDirGlobSort: # new in 1.8
  Enabled: true
Lint/RequireRelativeSelfPath: # new in 1.22
  Enabled: true
Lint/SymbolConversion: # new in 1.9
  Enabled: true
Lint/ToEnumArguments: # new in 1.1
  Enabled: true
Lint/TripleQuotes: # new in 1.9
  Enabled: true
Lint/UnexpectedBlockArity: # new in 1.5
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # new in 1.1
  Enabled: false
Lint/UselessRuby2Keywords: # new in 1.23
  Enabled: true
Naming/BlockForwarding: # new in 1.24
  Enabled: true
Security/IoMethods: # new in 1.22
  Enabled: true
Style/ArgumentsForwarding: # new in 1.1
  Enabled: true
Style/CollectionCompact: # new in 1.2
  Enabled: true
Style/DocumentDynamicEvalDefinition: # new in 1.1
  Enabled: false
Style/EndlessMethod: # new in 1.8
  Enabled: true
Style/FileRead: # new in 1.24
  Enabled: true
Style/FileWrite: # new in 1.24
  Enabled: true
Style/HashConversion: # new in 1.10
  Enabled: true
Style/HashExcept: # new in 1.7
  Enabled: true
Style/IfWithBooleanLiteralBranches: # new in 1.9
  Enabled: true
Style/InPatternThen: # new in 1.16
  Enabled: true
Style/MapToHash: # new in 1.24
  Enabled: true
Style/MultilineInPatternThen: # new in 1.16
  Enabled: true
Style/NegatedIfElseCondition: # new in 1.2
  Enabled: true
Style/NilLambda: # new in 1.3
  Enabled: true
Style/NumberedParameters: # new in 1.22
  Enabled: true
Style/NumberedParametersLimit: # new in 1.22
  Enabled: true
Style/OpenStructUse: # new in 1.23
  Enabled: false
Style/QuotedSymbols: # new in 1.16
  Enabled: true
Style/RedundantArgument: # new in 1.4
  Enabled: true
Style/RedundantSelfAssignmentBranch: # new in 1.19
  Enabled: true
Style/SelectByRegexp: # new in 1.22
  Enabled: true
Style/StringChars: # new in 1.12
  Enabled: true
Style/SwapValues: # new in 1.1
  Enabled: true


# These cops should be run manually from time to time
# Style/MutableConstant
# Style/RescueModifier
# Style/PerlBackrefs
# Style/IfUnlessModifier
